#MP3デコード処理の概要

= このページに書いてあること =

このページでは、MP3データをPCMデータへ展開する際に必要となる処理の概要を示す。具体的な数字や演算方法は示さず、大まかな方法を把握するために役立つような文章であるように留意している。

具体的な処理方法の解説は、下層ページの制作を待たれたい。


= MP3のファイル構造 =

MP3ファイルは(ID3タグなどを除き)、フレームと呼ばれる単位の繰り返しにより構成される。ファイル内のフレームの数やサイズは不定である。

フレームには、フレームそのものがどのような性質のものであるかが記述された箇所(フレームヘッダ)・オーディオデータをデコードするために必要な補助的な情報が記述された箇所(サイド情報)・オーディオデータの三種類の情報が格納されている。

この三種類の情報の中で、フレームヘッダは4byteの固定長であり、サイド情報は格納されたデータがステレオかモノラル化によってデータ長が異なる。オーディオデータはフレームごとにサイズが異なる。

実際にMP3デコーダを実装する場合には、最初にフレームヘッダを探し、次にフレームヘッダ中の情報からサイド情報のサイズを取得し、更にサイド情報を読み込み、その情報をもとにオーディオデータを読み込むことになる。

日本語で書くと非常に複雑な処理のようであるが、コードに記述すればそれほど複雑な処理はない。


= Byte 単位のアクセスでは埒があかない =
MP3ファイルはPCMデータを出来る限り劣化させないように、且つ出来る限りサイズが小さくなるように加工したデータであるので、一般的なバイナリファイルと比べて非常に扱いが厄介である。大抵のバイナリファイルであれば、あらゆるデータがbyte単位で格納されているので、プログラムからアクセスする際にも精精byte単位でアクセスできればそれで事足りるが、MP3ファイルの場合に多くのデータがbyte境界を無視した形で格納されている。

例えば符号なし整数が格納されている箇所で、そのデータのとりうる値が0~7の範囲に収まる場合であれば3bitしかデータ格納用のスペースが割り当てられず、直後に次のデータが格納されている。このため、byte単位のアクセスではデータの取り出しが不便極まりない。実装にあたっては、自分でBitStreamを実装することとなるだろう。


Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages